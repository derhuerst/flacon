// github.com/derhuerst/flacon
"use strict";const r=function(){const r={},t={},e=(n,o)=>{if("string"!=typeof n)throw new Error("`id` must be a string.");if((Array.isArray(o)||"object"!=typeof o)&&(o={}),!r[n])throw new Error(n+" has not been registered.");const c=r[n];let i=Array.isArray(c.factory.deps)?c.factory.deps:[];const f=Object.keys(o).some(r=>i.indexOf(r)>=0);return f?(i=i.map(r=>{const t=e(r,o);if("function"!=typeof o[r])throw new Error("Mock for `"+r+"` must be a function.");return o.hasOwnProperty(r)?o[r](t):t}),c.factory.apply(Object.create(null),i)):(c.cache===t&&(i=i.map(r=>e(r,o)),c.cache=c.factory.apply({},i)),c.cache)};return e.flush=(n=>{if("string"!=typeof n)throw new Error("`id` must be a string.");if(!r[n])throw new Error(n+" has not been registered.");return r[n].cache=t,e}),e.publish=((e,n)=>{if("string"!=typeof e)throw new Error("`id` must be a string.");if("function"!=typeof n)throw new Error("`factory` must be a function.");if(r[e])throw new Error(e+" has already been registered.");return r[e]={factory:n,cache:t},n}),e};module&&(module.exports=r);
